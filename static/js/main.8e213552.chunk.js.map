{"version":3,"sources":["components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","description","title","this","item","onDeleteJob","onToggleJobComplete","className","isCompleted","type","checked","onChange","onClick","Component","textHolders","App","state","placeholderForInput","valueInput","currentTab","listItems","refNewJobItem","React","createRef","createNewJobItem","bind","onTypeJob","onChangeTypeJob","setInterval","setState","getPlaceholderInput","currentPosition","length","index","indexOf","slice","current","value","trim","alert","event","target","keyCode","tab","displayItems","filter","id","onKeyUp","ref","placeholder","map","key","deleteJob","toggleComplete","classNames","active","onChangeTab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e213552.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nclass TodoItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.description = props.title;\r\n    }\r\n\r\n    render() {\r\n        const {item, onDeleteJob, onToggleJobComplete} = this.props\r\n        return (\r\n            <li className={this.props.item.isCompleted === true ? 'completed' : ''}>\r\n                <div className=\"form-check\"> <label className=\"form-check-label\"> <input className=\"checkbox\" type=\"checkbox\" checked={item.isCompleted} onChange={onToggleJobComplete} /> {item.title} <i className=\"input-helper\"></i></label> </div> <i className=\"remove mdi mdi-close-circle-outline\" onClick={onDeleteJob}></i>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\n// Define props type\r\nTodoItem.propTypes = {\r\n    item: PropTypes.shape({\r\n        isCompleted: PropTypes.bool.isRequired,\r\n        title: PropTypes.string.isRequired\r\n    }),\r\n    onToggleJobComplete: PropTypes.func\r\n}\r\n\r\nexport default TodoItem;","import React, { Component } from 'react';\nimport classNames from 'classnames'\nimport './css/bootstrap.min.css'\nimport './css/todolist.css'\n// import './javascripts/jquery.min.js'\n// import './javascripts/popper.min.js'\n// import './javascripts/bootstrap.min.js'\nimport './App.css';\n\nimport TodoItem from './components/TodoItem';\n\nconst textHolders = ['What do you need to do today?', 'What next you want to do?', 'Type your job!']\nclass App extends Component<{}, any> {\n\n  // Avoid error: Property 'name of variable' does not exist on type 'Component's name' \n  refNewJobItem: any;\n\n  // constructor function\n  constructor(props) {\n    super(props)\n\n    // state\n    this.state = {\n      placeholderForInput: 0,\n      valueInput: '',\n      currentTab: 'all',\n      listItems: [\n        {\n          title: 'For what reason would it be advisable.',\n          isCompleted: false\n        },\n        {\n          title: 'For what reason would it be advisable for me to think.',\n          isCompleted: true\n        },\n        {\n          title: 'It be advisable for me to think about business content?',\n          isCompleted: false\n        },\n        {\n          title: 'Print Statements all',\n          isCompleted: false\n        },\n        {\n          title: 'Call Rampbo',\n          isCompleted: true\n        },\n        {\n          title: 'Print bills',\n          isCompleted: false\n        }\n      ]\n    }\n\n    this.refNewJobItem = React.createRef();\n\n    // this.toggleComplete = this.toggleComplete.bind(this)\n    this.createNewJobItem = this.createNewJobItem.bind(this)\n    this.onTypeJob = this.onTypeJob.bind(this)\n    this.onChangeTypeJob = this.onChangeTypeJob.bind(this)\n    // this.deleteJob = this.deleteJob.bind(this)\n\n    // change state\n    setInterval(() => {\n      this.setState({\n        placeholderForInput: this.getPlaceholderInput(this.state.placeholderForInput)\n      })\n    }, 2000);\n  };\n\n  // change placeholder of input new job\n  getPlaceholderInput(currentPosition) {\n    switch (currentPosition) {\n      case textHolders.length - 1:\n        return 0\n      default:\n        return currentPosition + 1\n    }\n  }\n\n  // handle toggle complete job\n  toggleComplete(item) {\n    const isCompleted = item.isCompleted\n    const {listItems} = this.state\n    const index = listItems.indexOf(item)\n\n    this.setState({\n      listItems: [\n        ...listItems.slice(0,index),\n        {\n          ...item,\n          isCompleted: !isCompleted\n        },\n        ...listItems.slice(index + 1)\n      ]\n    })\n  }\n\n  // create new job - demo for REF in React\n  createNewJobItem() {\n    const title = this.refNewJobItem.current.value\n    if(title.trim()) {\n      const {listItems} = this.state\n      this.setState({\n        listItems: [\n          ...listItems,\n          {\n            title: title,\n            isCompleted: false\n          }\n        ]\n      })\n    }\n    else {\n      alert('Job can not be empty')\n    }\n  }\n\n  // change value of Input when type\n  onChangeTypeJob(event) {\n    this.setState({\n      valueInput: event.target.value\n    })\n  }\n\n  // handle key up of input job\n  onTypeJob(event) {\n    const title = event.target.value\n    if(event.keyCode === 13) {\n      if(title.trim()) {\n        const {listItems} = this.state\n        this.setState({\n          listItems: [\n            ...listItems,\n            {\n              title: title,\n              isCompleted: false\n            }\n          ]\n        })\n      }\n      else {\n        alert('Job can not be empty')\n      }\n      this.setState({\n        valueInput: ''\n      })\n    }\n  }\n  \n  // Delete a job\n  deleteJob(item) {\n    const {listItems} = this.state\n    const index = listItems.indexOf(item)\n    this.setState({\n      listItems: [\n        ...listItems.slice(0, index),\n        ...listItems.slice(index + 1)\n      ]\n    })\n  }\n\n  // change tab\n  onChangeTab(tab) {\n    this.setState({\n      currentTab: tab\n    })\n  }\n\n  // render\n  render() {\n    const {placeholderForInput} = this.state // this syntax only useable from ES6\n    const {listItems, valueInput, currentTab} = this.state\n    var displayItems = [...listItems]\n    if(currentTab === 'active') {\n      displayItems = listItems.filter((item) => item.isCompleted === false)\n    }\n    else if(currentTab === 'completed'){\n      displayItems = listItems.filter((item) => item.isCompleted === true)\n    } \n    return (\n      <div className=\"App\">\n          <div className=\"page-content page-container\" id=\"page-content\">\n            <div className=\"padding\">\n              <div className=\"container d-flex justify-content-center\">\n                  <div className=\"col-lg-12\">\n                      <div className=\"card px-3\">\n                          <div className=\"card-body\">\n                              <h2 className=\"card-title my-3\">Awesome Todo list</h2>\n                                {\n                                  listItems.length > 0 &&\n                                  <p>{listItems.length} {listItems.length > 1 ? 'items' : 'item'} left</p>\n                                }\n                              <div className=\"add-items d-flex\">\n                                {/* DMSt: demo for state */}\n                                <input type=\"text\" value={valueInput} onChange={this.onChangeTypeJob} className=\"form-control todo-list-input\" onKeyUp={this.onTypeJob} ref={this.refNewJobItem} placeholder={textHolders[placeholderForInput]} />\n                                {/* end DMSt */}\n                                <button className=\"add btn btn-primary font-weight-bold todo-list-add-btn\" onClick={this.createNewJobItem}>Add</button> \n                              </div>\n                              <div className=\"list-wrapper\">\n                                <ul className=\"d-flex flex-column-reverse todo-list\">\n                                  {\n                                    // listItems.length > 0 && listItems.map((item, index) => <TodoItem item={item} key={index} onClick={this.toggleComplete.bind(this,index)} />)\n                                    displayItems.length > 0 && displayItems.map((item, index) => <TodoItem item={item} key={index} onDeleteJob={() => this.deleteJob(item)} onToggleJobComplete={() => this.toggleComplete(item)} />)\n                                  }\n                                  {\n                                  displayItems.length === 0 &&\n                                  <div className=\"App\">\n                                    <p className=\"alert alert-info\">You have not job yet</p>\n                                  </div>\n                                  }\n                                </ul>\n                              </div>\n                          </div>\n                          <div className=\"card-footer\">\n                            <ul className=\"filter-nav\">\n                              <li className={classNames('filter-item mx-2', { active:  currentTab === 'all'})} onClick={() => this.onChangeTab('all')}>All</li>\n                              <li className={classNames('filter-item mx-2', { active:  currentTab === 'active'})} onClick={() => this.onChangeTab('active')}>Active</li>\n                              <li className={classNames('filter-item mx-2', { active:  currentTab === 'completed'})} onClick={() => this.onChangeTab('completed')}>Completed</li>\n                            </ul>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}