{"version":3,"sources":["components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["props","item","onToggleJobComplete","onDeleteJob","className","isCompleted","type","checked","onChange","title","onClick","textHolders","listItemDatas","useState","placeholderForInput","setPlaceHolderForInput","valueInput","setValueInput","currentTab","setCurrentTab","listItems","setListItem","React","createRef","refNewJobItem","getPlaceholderInput","currentPosition","a","length","useEffect","current","focus","x","setInterval","then","data","clearInterval","onChangeTab","tab","filterListItems","filter","id","value","e","target","onKeyUp","event","keyCode","trim","newListItems","alert","onTypeJob","ref","placeholder","map","index","TodoItem","key","indexOf","deletedListItems","slice","deleteJob","updatedListItems","toggleComplete","classNames","active","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfaad748.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function(props) {\r\n    const {item, onToggleJobComplete, onDeleteJob} = props\r\n    return (\r\n        <li className={item.isCompleted === true ? 'completed' : ''}>\r\n            <div className=\"form-check\"> <label className=\"form-check-label\"> <input className=\"checkbox\" type=\"checkbox\" checked={item.isCompleted} onChange={onToggleJobComplete} /> {item.title} <i className=\"input-helper\"></i></label> </div> <i className=\"remove mdi mdi-close-circle-outline\" onClick={onDeleteJob}></i>\r\n        </li>\r\n    );\r\n}","import React, {useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport './css/bootstrap.min.css';\nimport './css/todolist.css';\nimport './App.css';\n\nimport TodoItem from './components/TodoItem';\n\nconst textHolders = ['What do you need to do today?', 'What next you want to do?', 'Type your job!'];\nconst listItemDatas = [\n    {\n      title: 'For what reason would it be advisable.',\n      isCompleted: false\n    },\n    {\n      title: 'For what reason would it be advisable for me to think.',\n      isCompleted: true\n    },\n    {\n      title: 'It be advisable for me to think about business content?',\n      isCompleted: false\n    },\n    {\n      title: 'Print Statements all',\n      isCompleted: false\n    },\n    {\n      title: 'Call Rampbo',\n      isCompleted: true\n    },\n    {\n      title: 'Print bills',\n      isCompleted: false\n    }\n] \n\nexport default function() {\n    const [placeholderForInput, setPlaceHolderForInput] = useState(0);\n    const [valueInput, setValueInput] = useState('');\n    const [currentTab, setCurrentTab] = useState('all');\n    const [listItems, setListItem] = useState(listItemDatas);\n    const [refNewJobItem] = useState(React.createRef());\n\n    // change placeholder of input new job\n    var getPlaceholderInput = async (currentPosition) => {\n        switch (currentPosition) {\n        case textHolders.length - 1:\n            return 0;\n        default:\n            return currentPosition + 1;\n        }\n    }\n\n    useEffect(() => {\n        refNewJobItem.current.focus();\n        // change state\n        var x = setInterval(() => {\n            getPlaceholderInput(placeholderForInput).then((data) => {\n                setPlaceHolderForInput(data);\n            })\n            clearInterval(x)\n        }, 3000);   \n    });\n\n    // handle toggle complete job\n    var toggleComplete = (item) => {\n        const index = listItems.indexOf(item)\n        const updatedListItems = [\n            ...listItems.slice(0, index),\n            {\n                ...item,\n                isCompleted: !item.isCompleted\n            },\n            ...listItems.slice(index + 1)\n        ]\n        setListItem(updatedListItems)\n    }\n\n    // create new job - demo for REF in React\n    var createNewJobItem = () => {\n        const title = refNewJobItem.current.value\n        if (title.trim()) {\n            const newListItems = [\n                ...listItems,\n                {\n                    title: title,\n                    isCompleted: false\n                }\n            ]\n            setListItem(newListItems)\n            setValueInput('')\n        }\n        else {\n            alert('Job can not be empty')\n        }\n    }\n\n    // change value of Input when type\n    var onChangeTypeJob = (event) => {\n        setValueInput(event.target.value) \n    }\n\n    // handle key up of input job\n    var onTypeJob = (event) => {\n        const title = event.target.value\n        if(event.keyCode === 13) {\n            if(title.trim()) {\n                const newListItems = [\n                    ...listItems,\n                    {\n                        title: title,\n                        isCompleted: false\n                    }\n                ]\n                setListItem(newListItems)\n            }\n            else {\n                alert('Job can not be empty')\n            }\n            setValueInput('')\n        }\n    }\n\n    // Delete a job\n    var deleteJob = (item) => {\n        const index = listItems.indexOf(item)\n        const deletedListItems = [\n            ...listItems.slice(0, index),\n            ...listItems.slice(index + 1)\n        ]\n        setListItem(deletedListItems)\n    }\n\n    // change tab\n    var onChangeTab = (tab) => {\n        setCurrentTab(tab)\n    }\n\n    // on filter list items\n    var filterListItems = () => {\n        if(currentTab === 'active') {\n            return listItems.filter((item) => item.isCompleted === false)\n        }\n        else if(currentTab === 'completed'){\n            return listItems.filter((item) => item.isCompleted === true)\n        }\n        else {\n            return listItems\n        } \n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"page-content page-container\" id=\"page-content\">\n                <div className=\"padding\">\n                    <div className=\"container d-flex justify-content-center\">\n                        <div className=\"col-lg-12\">\n                            <div className=\"card px-3\">\n                                <div className=\"card-body\">\n                                    <h2 className=\"card-title my-3\">Awesome Todo list</h2>\n                                    {\n                                        listItems.length > 0 &&\n                                        <p>{listItems.length} {listItems.length > 1 ? 'items' : 'item'} left</p>\n                                    }\n                                    <div className=\"add-items d-flex\">\n                                        <input type=\"text\" value={valueInput} onChange={(e) => onChangeTypeJob(e)} className=\"form-control todo-list-input\" onKeyUp={(e) => onTypeJob(e)} ref={refNewJobItem} placeholder={textHolders[placeholderForInput]} />\n                                        <button className=\"add btn btn-primary font-weight-bold todo-list-add-btn\" onClick={createNewJobItem}>Add</button> \n                                    </div>\n                                    <div className=\"list-wrapper\">\n                                        <ul className=\"d-flex flex-column-reverse todo-list\">\n                                            {\n                                                filterListItems().length > 0 && filterListItems().map((item, index) => \n                                                    <TodoItem item={item} key={index} onDeleteJob={() => deleteJob(item)} onToggleJobComplete={() => toggleComplete(item)} />\n                                                )\n                                            }\n                                            {\n                                                filterListItems().length === 0 &&\n                                                <div className=\"App\">\n                                                    <p className=\"alert alert-info\">You have not job yet</p>\n                                                </div>\n                                            }\n                                        </ul>\n                                    </div>\n                                </div>\n                                <div className=\"card-footer\">\n                                    <ul className=\"filter-nav\">\n                                        <li className={classNames('filter-item mx-2', { active:  currentTab === 'all'})} onClick={() => onChangeTab('all')}>All</li>\n                                        <li className={classNames('filter-item mx-2', { active:  currentTab === 'active'})} onClick={() => onChangeTab('active')}>Active</li>\n                                        <li className={classNames('filter-item mx-2', { active:  currentTab === 'completed'})} onClick={() => onChangeTab('completed')}>Completed</li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                </div>\n        </div>\n    )\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}